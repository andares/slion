#!/usr/bin/env php
<?php
/**
 * @author andares
 */
define('IN_CONSOLE', 1);

// console boot
$chord_bootstrap = function(Slim\Container $container, string $src) {
    $container['chord'] = function ($c) {
        return new Slion\Chord($c);
    };
    $chord = $container->get('chord');
    /* @var $chord \Slion\Console */
    $chord->map("$src/classes/Slion", 'Slion');
    // 设置console
    $chord->setDefaultDomain('slion');
};

// 载入环境
$settings = require __DIR__ . '/src/settings.php';
require __DIR__ . '/vendor/autoload.php';

// 获取 $chord
/* @var $app \Slim\App */
$chord = $app->getContainer()->get('chord');
/* @var $chord \Slion\Console */

// 载入commands
foreach ($app->getContainer()->get('slion_settings')['commands'] as $commands_file) {
    if (!file_exists($commands_file)) {
        $chord->ec("Commands file not found: $commands_file", 'warn');
        continue;
    }
    require $commands_file;
}

// 扫描目录
$classes_dir = __DIR__ . "/src/classes";
if (file_exists($classes_dir)) {
    $it = new \RecursiveDirectoryIterator($classes_dir);
    foreach ($it as $file) {
        /* @var $file \SplFileInfo */
        if (!$file->isDir()) {
            continue;
        }
        $chord->map($file->getRealPath(), $file->getBasename());
    }
}

try {
    $result = $chord($argv);
    $chord->ec("$result");
} catch (Throwable $exc) {
    $chord->ec($exc->getMessage(), 'halt');

    $chord->ec($exc->getTraceAsString());
}
//du($chord);
